script src="/js/three.min.js"
script src="/js/cameras/CombinedCamera.js"
script src="/js/renderers/Projector.js"
script src="/js/renderers/CanvasRenderer.js"
script src="/js/libs/stats.min.js"

javascript:
  var container, stats;
  var camera, scene, renderer;
  var lookAtScene = true;
  init();
  animate();
  function init() {
    container = document.createElement('div');
    document.body.appendChild(container);
    camera = new THREE.CombinedCamera(window.innerWidth / 2, window.innerHeight / 2, 70, 1, 1000, -500, 1000);
    camera.position.x = 200;
    camera.position.y = 100;
    camera.position.z = 200;
    scene = new THREE.Scene();
    // Grid
    var size = 500, step = 50;
    var geometry = new THREE.Geometry();
    for (var i = -size; i <= size; i += step) {
      geometry.vertices.push(new THREE.Vector3(-size, 0, i));
      geometry.vertices.push(new THREE.Vector3(size, 0, i));
      geometry.vertices.push(new THREE.Vector3(i, 0, -size));
      geometry.vertices.push(new THREE.Vector3(i, 0, size));
    }
    var material = new THREE.LineBasicMaterial({color: 0x000000, opacity: 0.2});
    var line = new THREE.LineSegments(geometry, material);
    scene.add(line);
    // Cubes
    var geometry = new THREE.BoxGeometry(50, 50, 50);
    var material = new THREE.MeshLambertMaterial({color: 0xffffff, overdraw: 0.5});
    for (var i = 0; i < 100; i++) {
      var cube = new THREE.Mesh(geometry, material);
      cube.scale.y = Math.floor(Math.random() * 2 + 1);
      cube.position.x = Math.floor(( Math.random() * 1000 - 500 ) / 50) * 50 + 25;
      cube.position.y = ( cube.scale.y * 50 ) / 2;
      cube.position.z = Math.floor(( Math.random() * 1000 - 500 ) / 50) * 50 + 25;
      scene.add(cube);
    }
    // Lights
    var ambientLight = new THREE.AmbientLight(0x40);
    scene.add(ambientLight);
    var directionalLight = new THREE.DirectionalLight(0x00ff00);
    directionalLight.position.x = 0.5;
    directionalLight.position.y = 0.5;
    directionalLight.position.z = - 0.5;
    directionalLight.position.normalize();
    scene.add(directionalLight);
    var directionalLight = new THREE.DirectionalLight(0x0000ff);
    directionalLight.position.x = 0.5;
    directionalLight.position.y = - 0.5;
    directionalLight.position.z = 0.5;
    directionalLight.position.normalize();
    scene.add(directionalLight);
    var directionalLight = new THREE.DirectionalLight(0xdddddd);
    directionalLight.position.x = - 0.5;
    directionalLight.position.y = 0.5;
    directionalLight.position.z = 0.5;
    directionalLight.position.normalize();
    scene.add(directionalLight);
    renderer = new THREE.CanvasRenderer();
    renderer.setClearColor(0xf0f0f0);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);
    stats = new Stats();
    container.appendChild(stats.dom);
    window.addEventListener('resize', onWindowResize, false);
    function onWindowResize() {
      camera.setSize(window.innerWidth, window.innerHeight);
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }
    camera.toOrthographic();
    //camera.setLens(24);
    camera.setFov(80);
  }
  //
  function animate() {
    requestAnimationFrame(animate);
    stats.begin();
    render();
    stats.end();
  }
  function render() {
    var timer = Date.now() * 0.0001;
    camera.position.x = Math.cos(timer) * 200;
    camera.position.z = Math.sin(timer) * 200;
    if (lookAtScene) camera.lookAt(scene.position);
    renderer.render(scene, camera);
  }